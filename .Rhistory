mod2<-lmer(diam~1+(1|tornillo)+(1|oper))+(1|tornillo:oper), REML=F)
mod1<-lmer(diam~1+(1|tornillo)+(1|oper), REML=F)
anova(mod1,mod2)
mod2<-lmer(diam~1+(1|tornillo)+(1|oper)+(1|tornillo:oper), REML=F)
mod1<-lmer(diam~1+(1|tornillo)+(1|oper), REML=F)
mod2<-lmer(diam~1+(1|tornillo)+(1|oper)+(1|tornillo:oper), REML=F)
anova(mod1,mod2)
boxplot(diam~oper:tornillo,cex.axis=0.6,las=2)
mod1<-lmer(diam~1+(1|tornillo)+(1|oper), REML=F)
mod2<-lmer(diam~1+(1|tornillo)+(1|oper)+(1|tornillo:oper), REML=F)
anova(mod1,mod2)
prof=profile(mod2)
xyplot(prof,aspect=1.3)
confint(prof)
summary(mod2)
summary(mod2)[,3]
summary(mod2)$Var
names(summary(mod2))
summary(mod2)$residuals
summary(mod2)$vcov
vartotal<-0.0022379+0.0336134+0.0008535+0.0012917
reproducibilidad<-0.0008535+0.0012917
reproducibilidad/vartotal
summary(mod2)
vartotal<-0.0022379+0.0336134+0.0008535+0.0012917
reproducibilidad<-0.0008535+0.0012917
reproducibilidad/vartotal
vartotal<-0.0022379+0.0336134+0.0008535+0.0012917
reproducibilidad<-0.0008535+0.0012917
repetetibilidad<-0.0012917
medicion<-reproducibilidad+repetetibilidad
varGeneral<-0.0022379+0.0336134+0.0008535+0.0012917
carTotal<- 0.0022379 + 0.0336134 + 0.0008535 + 0.0012917
varTotal<- 0.0022379 + 0.0336134 + 0.0008535 + 0.0012917
reproducibilidad<-0.0008535+0.0012917
repetetibilidad<-0.0012917
medicion<-reproducibilidad+repetetibilidad
reproducibilidad/vartotal
reproducibilidad/varTotal
medicion/varTotal
summary(mod2)
varTotal<- 0.0022379 + 0.0336134 + 0.0008535 + 0.0012917
reproducibilidad<-0.0008535+0.0012917
repetetibilidad<-0.0012917
medicion<-reproducibilidad+repetetibilidad
reproducibilidad/varTotal
medicion/varTotal
summary(mod2)
varTotal<- 0.0022379 + 0.0336134 + 0.0008535 + 0.0012917
reproducibilidad<-0.0008535+0.0022379
repetetibilidad<-0.0012917
medicion<-reproducibilidad+repetetibilidad
reproducibilidad/varTotal
medicion/varTotal
varTotal<- 0.0022379 + 0.0336134 + 0.0008535 + 0.0012917
reproducibilidad<-0.0008535+0.0022379
repetetibilidad<-0.0012917
medicion<-reproducibilidad+repetetibilidad
reproducibilidad/varTotal
medicion/varTotal
load(file.choose())
View(base)
attach(base)
xtabs(~plato+muestra)
mod1<-lmer(diam~plato+(1|muestra))
summary(mod1)
mod1<-lmer(diam~plato+(1|muestra), REML=FALSE)
summary(mod1)
mod1<-lmer(diam~plato+(1|muestra)+(1|plato:muestra), REML=FALSE)
anova(mod1,mod2)
mod1<-lmer(diam~plato+(1|muestra), REML=FALSE)
mod2<-lmer(diam~plato+(1|muestra)+(1|plato:muestra), REML=FALSE)
anova(mod1,mod2)
dotplot(diam~plato|muestra)  #barrica para poder hacer grafico
boxplot(diam~plato|muestra)
boxplot(diam~muestra)
mod1<-lmer(diam~1+plato+(1+plato|muestra),REML=F)
summary(mod1)
mod2<-lmer(diam~1+plato+(1|muestra)+(0+plato|muestra),REML=F)
anova(mod1,mod2)
mod3=lmer(diam~1+plato+(1|muestra),REML=F)
anova(mod1,mod3)
dotplot(diam~plato|muestra) ; dotplot(diam~muestra|plato)
dotplot(diam~plato|muestra) ; dotplot(diam~muestra|plato)
boxplot(diam~plato:muestra,cex.axis=0.6,las=2)
prof=profile(mod1)
xyplot(prof,aspect=1.3)
confint(prof)
mod1<-lmer(diam~1+as.factor(plato)+(1+plato|muestra),REML=F)
mod1<-lmer(diam~1+plato+(1+plato|muestra),REML=F)
mod2<-lmer(diam~1+plato+(1|muestra)+(0+plato|muestra),REML=F)
mod3=lmer(diam~1+plato+(1|muestra),REML=F)
anova(mod1,mod3)
mod1<-lmer(diam~1+plato+(1+plato|muestra),REML=F)
mod3=lmer(diam~1+plato+(1|muestra),REML=F)
anova(mod1,mod3)
confint(prof)[1:3,]
xyplot(prof[1:3,],aspect=1.3)
prof=profile(mod1)
xyplot(prof[1:3,],aspect=1.3)
confint(prof)[1:3,]
summary(mod1)
mod3=lmer(diam~1+plato+(1|muestra),REML=F)
mod3=lmer(diam~1+plato+(1|muestra),REML=F)
summary(mod3)
summary(mod3)
prof=profile(mod1)
confint(prof)[1:3,]
qqmath(ranef(mod1,condVar=T))
load(file.choose())
library(lme4)
library(lattice)
#####PREGUNTA 1
# A
base$Anno=base$A-2001
attach(base)
beta0=beta1=c()
Grid1=as.numeric(factor(Grid))
nGrid<-length(table(Grid))
for(i in 1:nGrid)  {
mod=lm(TCOV~Anno,base[Grid1==i,])
beta0[i]=mod$coef[1]
beta1[i]=mod$coef[2]
}
o=order(beta0)
xyplot(TCOV~Anno|Grid1,pch=18,ylab="cobertura",type=c("p","r"),index.cond=list(o))
xyplot(TCOV~Anno,group=Grid1,pch=18,ylab="cobertura promedio",type=c("r"))
plot(beta0,beta1)
cor(beta0,beta1)
# B
xyplot(TCOV~Anno|TRT,group=Grid1,pch=18,ylab="cobertura promedio",type=c("r"),layout=c(3,1))
xyplot(TCOV~Anno,group=TRT,col=1:4,ylab="cobertura promedio",xlab="A単o",type=c("r"),key=list(corner=c(0,1),lines=list(col=1:4,lty=1),text=list(c("C","noD","nP","nR"))))
mod1=lmer(TCOV~Anno*TRT+Lluvia+(1+Anno|factor(Grid)),REML=F)
mod2=lmer(TCOV~Anno*TRT+Lluvia+(1|factor(Grid))+(0+Anno|factor(Grid)),REML=F)
anova(mod1,mod2)
mod3=lmer(TCOV~Anno*TRT+Lluvia+(1|factor(Grid)),REML=F)
anova(mod3,mod2)
mod4=lmer(TCOV~Anno*TRT+(1|factor(Grid))+(0+Anno|factor(Grid)),REML=F)
anova(mod4,mod2)
mod5<-lm(TCOV~Anno*TRT)
summary(mod5)
prof=profile(mod2)
xyplot(prof,aspect=1.3)
confint(prof)
summary(mod2)
plot(TCOV~Lluvia)
cor(TCOV,Lluvia)
mod2=lmer(TCOV~A単o1*TRT+Lluvia+(1|factor(Grid))+(0+A単o1|factor(Grid)),REML=F)
mod2=lmer(TCOV~Anno*TRT+Lluvia+(1|factor(Grid))+(0+A単o1|factor(Grid)),REML=F)
prof=profile(mod2)
xyplot(prof,aspect=1.3)
confint(prof)
summary(mod2)
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
attach(base)
# Analisis preliminar
table(status_group)
## anidamiento de lugares
length(levels(region))
length(levels(subvillage))
levels(as.factor(region_code))
attach(base)
length(levels(schemme_name))
length(levels(scheme_name))
length(levels(installer))
funder
length(levels(funder))
length(levels(extraction_type_group))
length(levels(extraction_type_class ))
table(extraction_type_class , extraction_type_group)
54308-7725
55083-62
55021-775
55021-7
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
construction_year[construction_year ==0]
min(construction_year)
min(construction_year[construction_year ==0])
min(construction_year[!construction_year ==0])
hist(date_recorded)
View(base)
as.Date(construction_year)
typeof(construction_year)
View(base)
as.Date(date_recorded)
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
attach(base)
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
attach(base)
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(source=-"unknown")]
base<-base[!(source=="unknown")]
base<-base[!(source=="unknown"),]
base<-base[!(quantity=="unknown"),]
base<-base[!(payment_type=="unknown"),]
base<-base[!(quality_group=="unknown"),]
base<-base[!(construction_year==0),]
construction_year<-construction_year-1960
#### PRIMER MODELO!!!! WOOOOOOOO
set.seed(123)
base1<- base  %>% sample_n(1000)
levels(base1$region)
levels(base1$scheme_management)
#Aqui van las rutas de la compu de cada uno donde tienen el repositorio
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
attach(base)
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
attach(base)
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(scheme_management==""),]
base<-base[!(source=="unknown"),]
base<-base[!(quantity=="unknown"),]
base<-base[!(payment_type=="unknown"),]
base<-base[!(quality_group=="unknown"),]
base<-base[!(construction_year==0),]
construction_year<-construction_year-1960
#### PRIMER MODELO!!!! WOOOOOOOO
set.seed(123)
train<- base  %>% sample_n(1000)
test<- base  %>% sample_n(200)
levels(train$region_code)
levels(train$region_code)
summary(train$region_code)
levels(train$region)
levels(train$basin)
levels(train$management)
levels(train$payment_type)
table(train$payment_type)
table(base$payment_type)
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
attach(base)
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
attach(base)
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(management=="unknown"),]
base<-base[!(scheme_management==""),]
base<-base[!(source=="unknown"),]
base<-base[!(quantity=="unknown"),]
base<-base[!(payment_type=="unknown"),]
base<-base[!(quality_group=="unknown"),]
base<-base[!(construction_year==0),]
base$age<-construction_year-1960
#### PRIMER MODELO!!!! WOOOOOOOO
set.seed(123)
train<- base  %>% sample_n(1000)
test<- base  %>% sample_n(200)
Aqui van las rutas de la compu de cada uno donde tienen el repositorio
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(management=="unknown"),]
base<-base[!(scheme_management==""),]
base<-base[!(source=="unknown"),]
base<-base[!(quantity=="unknown"),]
base<-base[!(payment_type=="unknown"),]
base<-base[!(quality_group=="unknown"),]
base<-base[!(construction_year==0),]
base$age<-construction_year-1960
#### PRIMER MODELO!!!! WOOOOOOOO
set.seed(123)
train<- base  %>% sample_n(1000)
test<- base  %>% sample_n(200)
levels(payment_type)
table(payment_type)
#Aqui van las rutas de la compu de cada uno donde tienen el repositorio
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(base$management=="unknown"),]
base<-base[!(base$scheme_management==""),]
base<-base[!(base$source=="unknown"),]
base<-base[!(base$quantity=="unknown"),]
base<-base[!(base$payment_type=="unknown"),]
base<-base[!(base$quality_group=="unknown"),]
base<-base[!(base$construction_year==0),]
base$age<-construction_year-1960
#### PRIMER MODELO!!!! WOOOOOOOO
set.seed(123)
train<- base  %>% sample_n(1000)
test<- base  %>% sample_n(200)
table(payment_type)
length(base$management=="unknown")
table(base$management=="unknown")
table(base$management="unknown")
table(base$management=='unknown')
table(management)
names(management)
levels(management)
management=='unknown'
#Aqui van las rutas de la compu de cada uno donde tienen el repositorio
setwd('/Users/ramonosx/Documents/GitHub/experimentos2-TAARIFA')
# Librerias
library('dplyr')
# Carga de los datos
## LA VARIABLE A PREDECIR ES status_group
predictoras<-read.csv('predictoras.csv', header = T)
respuesta<-read.csv('respuesta.csv', header = T)
base<-merge(predictoras,respuesta,by= 'id')
predictoras<-NULL
respuesta<-NULL
# Analisis preliminar
##VAR respuesta con ceros y unos
base<- base[!(status_group=="functional needs repair"),]
base$status = 1*(base$status_group=='functional')
summary(status)
##### limpieza de variables
##################   MIGUEL  ########################
#Funder - reduce factor levels
NUM_LEVELS_FUNDER = 10 #Funder will have this many + 1 levels
#############################################################################################
length(levels(funder))
funderNames <- names(summary(base$funder)[1:NUM_LEVELS_FUNDER])
funder <- factor(base$funder, levels=c(funderNames, "Other"))
funder[is.na(funder)] <- "Other"
base$funder <- funder
length(levels(funder))
#Installer - reduce factor levels
NUM_LEVELS_INSTALLER = 10 #Installer will have this many + 1 levels
#############################################################################################
length(levels(installer))
installerNames <- names(summary(base$installer)[1:NUM_LEVELS_INSTALLER])
installer <- factor(base$installer, levels=c(installerNames, "Other"))
installer[is.na(installer)] <- "Other"
base$installer <- installer
length(levels(installer))
base<-base[!(management=='unknown'),]
table(management)
table(base$management)
